<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
    <style>
        .chat-container {
            height: 600px;
            overflow-y: auto;
            background: #f9fafb;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 1rem;
        }
        .message-bubble {
            max-width: 80%;
            word-wrap: break-word;
            margin-bottom: 1rem;
            padding: 0.75rem 1rem;
            border-radius: 12px;
        }
        .message-bubble.user {
            background: #3b82f6;
            color: white;
            margin-left: auto;
        }
        .message-bubble.agent {
            background: white;
            border: 1px solid #e5e7eb;
        }
        .loading-dots {
            display: inline-block;
        }
        .loading-dots:after {
            content: '';
            animation: dots 1.5s steps(4, end) infinite;
        }
        @keyframes dots {
            0%, 20% { content: ''; }
            40% { content: '.'; }
            60% { content: '..'; }
            80%, 100% { content: '...'; }
        }
        .training-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        .training-grid {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 2rem;
            margin-top: 2rem;
        }
        .agents-sidebar {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            height: fit-content;
        }
        .training-main {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        .btn {
            padding: 0.5rem 1rem;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
        }
        .btn-primary {
            background: #3b82f6;
            color: white;
        }
        .btn-primary:hover {
            background: #2563eb;
        }
        .btn-success {
            background: #10b981;
            color: white;
        }
        .btn-success:hover {
            background: #059669;
        }
        .agent-item {
            padding: 1rem;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            cursor: pointer;
            margin-bottom: 0.5rem;
            transition: all 0.2s;
        }
        .agent-item:hover {
            border-color: #3b82f6;
            background: #f8fafc;
        }
        .agent-item.active {
            border-color: #3b82f6;
            background: #eff6ff;
        }
        .modal {
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }
        .modal.show {
            display: flex;
        }
        .modal-content {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            width: 90%;
            max-width: 400px;
        }
        .tab-button {
            transition: all 0.2s;
        }
        .tab-button:hover {
            color: #3b82f6 !important;
        }
        .tab-button.active {
            border-bottom: 2px solid #3b82f6 !important;
            color: #3b82f6 !important;
        }
        .session-card {
            padding: 1rem;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            margin-bottom: 0.75rem;
            transition: all 0.2s;
        }
        .session-card:hover {
            border-color: #3b82f6;
            background: #f8fafc;
        }
        .session-status {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-weight: 500;
        }
        .status-completed {
            background: #d1fae5;
            color: #065f46;
        }
        .status-active {
            background: #dbeafe;
            color: #1e40af;
        }
        .status-incomplete {
            background: #fef3c7;
            color: #92400e;
        }
        
        /* Loading Overlay */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            backdrop-filter: blur(2px);
        }
        .loading-overlay.show {
            display: flex;
        }
        .loading-content {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            text-align: center;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            min-width: 300px;
        }
        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f4f6;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Message Box */
        .message-box {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            z-index: 10000;
            min-width: 400px;
            max-width: 500px;
            display: none;
            animation: messageBoxIn 0.3s ease-out;
        }
        .message-box.show {
            display: block;
        }
        @keyframes messageBoxIn {
            from {
                opacity: 0;
                transform: translate(-50%, -50%) scale(0.9);
            }
            to {
                opacity: 1;
                transform: translate(-50%, -50%) scale(1);
            }
        }
        .message-box.success {
            border-left: 4px solid #10b981;
        }
        .message-box.error {
            border-left: 4px solid #ef4444;
        }
        .message-box.warning {
            border-left: 4px solid #f59e0b;
        }
        .message-box-header {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
        }
        .message-box-icon {
            font-size: 1.5rem;
            margin-right: 0.75rem;
        }
        .message-box-title {
            font-size: 1.125rem;
            font-weight: 600;
            margin: 0;
        }
        .message-box-content {
            color: #6b7280;
            margin-bottom: 1.5rem;
            line-height: 1.5;
        }
        .message-box-actions {
            display: flex;
            justify-content: flex-end;
            gap: 0.5rem;
        }
        .message-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.3);
            z-index: 9999;
            display: none;
        }
        .message-backdrop.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Navigation -->
        <%- include('partials/navigation', { currentPage: 'train-agent', user: user }) %>

        <!-- Main Content -->
        <main class="training-container">
            <div class="dashboard-title">
                <h2>Train your AI Agent</h2>
                <p>Create and train AI agents to handle your social media messages with your unique communication style.</p>
            </div>

            <div class="training-grid">
                <!-- Agents Sidebar -->
                <div class="agents-sidebar">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
                        <h3 style="margin: 0; font-size: 1.1rem; font-weight: 600;">Your Agents</h3>
                        <button onclick="showCreateAgentModal()" class="btn btn-primary" style="font-size: 0.875rem;">
                            + Create Agent
                        </button>
                    </div>
                    
                    <div id="agents-list">
                        <div style="text-align: center; color: #6b7280; padding: 2rem 0;">
                            <p>Loading agents...</p>
                        </div>
                    </div>
                </div>

                <!-- Training Main Area -->
                <div class="training-main">
                    <div id="no-agent-selected" style="text-align: center; padding: 3rem;">
                        <div style="width: 4rem; height: 4rem; margin: 0 auto 1rem; background: #f3f4f6; border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                            🤖
                        </div>
                        <h3 style="margin: 0 0 0.5rem; font-size: 1.25rem; font-weight: 600;">Select an Agent to Start Training</h3>
                        <p style="margin: 0; color: #6b7280;">Choose an agent from the list or create a new one to begin training.</p>
                    </div>

                    <div id="training-interface" style="display: none;">
                        <!-- Agent Header -->
                        <div id="agent-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; padding-bottom: 1rem; border-bottom: 1px solid #e5e7eb;">
                            <!-- Agent info will be populated here -->
                        </div>

                        <!-- Training Tabs -->
                        <div class="training-tabs" style="margin-bottom: 1.5rem;">
                            <div style="display: flex; border-bottom: 1px solid #e5e7eb;">
                                <button onclick="showCurrentSession()" id="current-tab" class="tab-button active" style="padding: 0.75rem 1.5rem; border: none; background: none; cursor: pointer; font-weight: 500; border-bottom: 2px solid #3b82f6; color: #3b82f6;">
                                    Current Session
                                </button>
                                <button onclick="showTrainingHistory()" id="history-tab" class="tab-button" style="padding: 0.75rem 1.5rem; border: none; background: none; cursor: pointer; font-weight: 500; border-bottom: 2px solid transparent; color: #6b7280;">
                                    Training History
                                </button>
                            </div>
                        </div>

                        <!-- Current Session Tab -->
                        <div id="current-session-tab" class="tab-content">
                            <!-- Chat Messages -->
                            <div id="chat-messages" class="chat-container" style="margin-bottom: 1rem;">
                                <!-- Messages will appear here -->
                            </div>

                            <!-- Message Input -->
                            <div style="display: flex; gap: 0.75rem; margin-bottom: 1rem;">
                                <input type="text" id="message-input" placeholder="Type your message..." 
                                       style="flex: 1; padding: 0.75rem; border: 1px solid #d1d5db; border-radius: 6px; outline: none;">
                                <button onclick="sendMessage()" id="send-button" class="btn btn-primary">
                                    Send
                                </button>
                            </div>

                            <!-- Training Actions -->
                            <div style="display: flex; justify-content: space-between; align-items: center; padding-top: 1rem; border-top: 1px solid #e5e7eb;">
                                <div>
                                    <button onclick="completeTraining()" class="btn btn-success">
                                        Complete Training Session
                                    </button>
                                </div>
                                <div id="training-progress" style="font-size: 0.875rem; color: #6b7280;">
                                    <!-- Progress info will be shown here -->
                                </div>
                            </div>
                        </div>

                        <!-- Training History Tab -->
                        <div id="training-history-tab" class="tab-content" style="display: none;">
                            <div id="training-sessions-list">
                                <div style="text-align: center; color: #6b7280; padding: 2rem 0;">
                                    <p>Loading training history...</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Create Agent Modal -->
    <div id="create-agent-modal" class="modal">
        <div class="modal-content">
            <h3 style="margin: 0 0 1.5rem; font-size: 1.25rem; font-weight: 600;">Create New Agent</h3>
            <form id="create-agent-form">
                <div style="margin-bottom: 1rem;">
                    <label for="agent-name" style="display: block; font-size: 0.875rem; font-weight: 500; margin-bottom: 0.5rem;">Agent Name</label>
                    <input type="text" id="agent-name" name="name" required 
                           placeholder="e.g., Sarah, Mike, Alex..."
                           style="width: 100%; padding: 0.75rem; border: 1px solid #d1d5db; border-radius: 6px; outline: none;">
                </div>
                <div style="margin-bottom: 1.5rem;">
                    <label for="agent-description" style="display: block; font-size: 0.875rem; font-weight: 500; margin-bottom: 0.5rem;">Description</label>
                    <input type="text" id="agent-description" name="description" required 
                           placeholder="e.g., Instagram manager, Facebook agent..."
                           style="width: 100%; padding: 0.75rem; border: 1px solid #d1d5db; border-radius: 6px; outline: none;">
                </div>
                <div style="display: flex; justify-content: flex-end; gap: 0.75rem;">
                    <button type="button" onclick="hideCreateAgentModal()" 
                            style="padding: 0.5rem 1rem; border: 1px solid #d1d5db; background: white; border-radius: 6px; cursor: pointer;">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-primary">
                        Create Agent
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div id="loading-overlay" class="loading-overlay">
        <div class="loading-content">
            <div class="loading-spinner"></div>
            <h3 id="loading-title" style="margin: 0 0 0.5rem; font-size: 1.125rem; font-weight: 600;">Processing...</h3>
            <p id="loading-message" style="margin: 0; color: #6b7280;">Please wait while we complete your request.</p>
        </div>
    </div>

    <!-- Message Backdrop -->
    <div id="message-backdrop" class="message-backdrop"></div>

    <!-- Message Box -->
    <div id="message-box" class="message-box">
        <div class="message-box-header">
            <span id="message-icon" class="message-box-icon">✅</span>
            <h3 id="message-title" class="message-box-title">Success</h3>
        </div>
        <div id="message-content" class="message-box-content">
            Operation completed successfully.
        </div>
        <div class="message-box-actions">
            <button onclick="hideMessageBox()" class="btn btn-primary">
                OK
            </button>
        </div>
    </div>

    <script>
        let currentAgent = null;
        let currentSession = null;
        let isLoading = false;

        // Loading and Message Box Functions
        function showLoading(title = 'Processing...', message = 'Please wait while we complete your request.') {
            document.getElementById('loading-title').textContent = title;
            document.getElementById('loading-message').textContent = message;
            document.getElementById('loading-overlay').classList.add('show');
        }

        function hideLoading() {
            document.getElementById('loading-overlay').classList.remove('show');
        }

        function showMessageBox(type = 'success', title = 'Success', message = 'Operation completed successfully.', autoHide = true) {
            const messageBox = document.getElementById('message-box');
            const messageBackdrop = document.getElementById('message-backdrop');
            const messageIcon = document.getElementById('message-icon');
            const messageTitle = document.getElementById('message-title');
            const messageContent = document.getElementById('message-content');

            // Set icon based on type
            const icons = {
                success: '✅',
                error: '❌',
                warning: '⚠️',
                info: 'ℹ️'
            };

            messageIcon.textContent = icons[type] || icons.success;
            messageTitle.textContent = title;
            messageContent.textContent = message;

            // Remove previous type classes and add current type
            messageBox.classList.remove('success', 'error', 'warning', 'info');
            messageBox.classList.add(type);

            // Show message box and backdrop
            messageBackdrop.classList.add('show');
            messageBox.classList.add('show');

            // Auto-hide after 3 seconds if specified
            if (autoHide) {
                setTimeout(() => {
                    hideMessageBox();
                }, 3000);
            }
        }

        function hideMessageBox() {
            const messageBox = document.getElementById('message-box');
            const messageBackdrop = document.getElementById('message-backdrop');
            
            messageBox.classList.remove('show');
            messageBackdrop.classList.remove('show');
        }

        // Close message box when clicking backdrop
        document.getElementById('message-backdrop').addEventListener('click', hideMessageBox);

        // Check authentication and load agents on page load
        document.addEventListener('DOMContentLoaded', function() {
            checkAuthentication();
            loadAgents();
        });

        // Check if user is authenticated
        function checkAuthentication() {
            const token = localStorage.getItem('accessToken');
            if (!token) {
                // No token found, redirect to login
                window.location.href = '/login';
                return;
            }
        }

        // Load user's agents
        async function loadAgents() {
            try {
                const response = await fetch('/api/agents', {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    displayAgents(data.data);
                } else {
                    console.error('Failed to load agents');
                }
            } catch (error) {
                console.error('Error loading agents:', error);
            }
        }

        // Display agents in the sidebar
        function displayAgents(agents) {
            const agentsList = document.getElementById('agents-list');
            
            if (agents.length === 0) {
                agentsList.innerHTML = `
                    <div style="text-align: center; color: #6b7280; padding: 2rem 0;">
                        <div style="font-size: 2rem; margin-bottom: 0.5rem;">🤖</div>
                        <p>No agents created yet</p>
                    </div>
                `;
            } else {
                agentsList.innerHTML = agents.map(agent => `
                    <div class="agent-item ${currentAgent?.id === agent.id ? 'active' : ''}" 
                         onclick="selectAgent('${agent.id}')" data-agent-id="${agent.id}">
                        <div style="display: flex; justify-content: space-between; align-items: start;">
                            <div>
                                <h4 style="margin: 0; font-weight: 500;">${agent.name}</h4>
                                <p style="margin: 0.25rem 0 0; font-size: 0.875rem; color: #6b7280;">${agent.description}</p>
                                <div style="display: flex; align-items: center; margin-top: 0.5rem;">
                                    <span style="padding: 0.25rem 0.5rem; border-radius: 9999px; font-size: 0.75rem; font-weight: 500;
                                        ${agent.status === 'active' ? 'background: #dcfce7; color: #166534;' : 
                                          agent.status === 'training' ? 'background: #fef3c7; color: #92400e;' : 
                                          'background: #f3f4f6; color: #374151;'}">
                                        ${agent.status}
                                    </span>
                                    <span style="margin-left: 0.5rem; font-size: 0.75rem; color: #9ca3af;">
                                        ${Math.round(agent.trainingProgress || 0)}% trained
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                `).join('');
            }
        }

        // Select an agent for training
        async function selectAgent(agentId) {
            try {
                const response = await fetch(`/api/agents/${agentId}`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    currentAgent = data.data;
                    await startTrainingSession();
                    showTrainingInterface();
                } else {
                    console.error('Failed to load agent');
                }
            } catch (error) {
                console.error('Error loading agent:', error);
            }
        }

        // Start a new training session
        async function startTrainingSession() {
            try {
                const response = await fetch(`/api/agents/${currentAgent.id}/training-sessions`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
                    },
                    body: JSON.stringify({
                        title: `Training Session ${new Date().toLocaleDateString()}`
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    currentSession = data.data;
                    loadChatMessages();
                } else {
                    console.error('Failed to start training session');
                }
            } catch (error) {
                console.error('Error starting training session:', error);
            }
        }

        // Show training interface
        function showTrainingInterface() {
            document.getElementById('no-agent-selected').style.display = 'none';
            document.getElementById('training-interface').style.display = 'block';
            
            // Update agent header
            const agentHeader = document.getElementById('agent-header');
            agentHeader.innerHTML = `
                <div>
                    <h3 style="margin: 0; font-size: 1.125rem; font-weight: 600;">${currentAgent.name}</h3>
                    <p style="margin: 0.25rem 0 0; font-size: 0.875rem; color: #6b7280;">${currentAgent.description}</p>
                </div>
                <div style="text-align: right;">
                    <span style="padding: 0.25rem 0.5rem; border-radius: 9999px; font-size: 0.75rem; font-weight: 500;
                        ${currentAgent.status === 'active' ? 'background: #dcfce7; color: #166534;' : 
                          currentAgent.status === 'training' ? 'background: #fef3c7; color: #92400e;' : 
                          'background: #f3f4f6; color: #374151;'}">
                        ${currentAgent.status}
                    </span>
                    <div style="font-size: 0.75rem; color: #9ca3af; margin-top: 0.25rem;">
                        ${Math.round(currentAgent.trainingProgress || 0)}% trained
                    </div>
                </div>
            `;
            
            // Update training progress
            updateTrainingProgress();
            
            // Focus on message input
            document.getElementById('message-input').focus();
        }

        // Load chat messages
        function loadChatMessages() {
            const chatMessages = document.getElementById('chat-messages');
            
            if (!currentSession || !currentSession.messages || currentSession.messages.length === 0) {
                chatMessages.innerHTML = `
                    <div style="text-align: center; color: #6b7280; padding: 2rem;">
                        <div style="font-size: 2rem; margin-bottom: 0.5rem;">💬</div>
                        <p>Start the conversation with your agent!</p>
                        <p style="font-size: 0.875rem; margin-top: 0.25rem;">Ask questions to help your agent learn your communication style.</p>
                    </div>
                `;
                return;
            }

            chatMessages.innerHTML = currentSession.messages.map(message => {
                const isUser = message.role === 'user';
                return `
                    <div style="display: flex; ${isUser ? 'justify-content: flex-end;' : 'justify-content: flex-start;'} margin-bottom: 1rem;">
                        <div class="message-bubble ${isUser ? 'user' : 'agent'}">
                            <div style="font-size: 0.875rem; font-weight: 500; margin-bottom: 0.25rem; ${isUser ? 'color: rgba(255,255,255,0.8);' : 'color: #6b7280;'}">
                                ${isUser ? 'You' : currentAgent.name}
                            </div>
                            <div style="font-size: 0.875rem;">${message.content}</div>
                            <div style="font-size: 0.75rem; ${isUser ? 'color: rgba(255,255,255,0.6);' : 'color: #9ca3af;'} margin-top: 0.25rem;">
                                ${new Date(message.timestamp).toLocaleTimeString()}
                            </div>
                        </div>
                    </div>
                `;
            }).join('');

            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Send a message
        async function sendMessage() {
            const messageInput = document.getElementById('message-input');
            const message = messageInput.value.trim();
            
            if (!message || !currentSession || isLoading) return;

            isLoading = true;
            messageInput.value = '';
            
            // Disable send button
            const sendButton = document.getElementById('send-button');
            sendButton.disabled = true;
            sendButton.innerHTML = '<span class="loading-dots">Sending</span>';

            try {
                const response = await fetch(`/api/agents/training-sessions/${currentSession.id}/messages`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
                    },
                    body: JSON.stringify({ content: message })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    
                    // Add messages to current session
                    currentSession.messages.push(data.data.userMessage);
                    currentSession.messages.push(data.data.agentResponse);
                    
                    // Update chat display
                    loadChatMessages();
                    
                    // Update training progress
                    updateTrainingProgress();
                } else {
                    console.error('Failed to send message');
                    showMessageBox('error', 'Message Failed', 'Unable to send your message. Please check your connection and try again.', false);
                }
            } catch (error) {
                console.error('Error sending message:', error);
                showMessageBox('error', 'Connection Error', 'Unable to send message due to a connection issue. Please try again.', false);
            } finally {
                isLoading = false;
                sendButton.disabled = false;
                sendButton.innerHTML = 'Send';
                messageInput.focus();
            }
        }

        // Update training progress display
        function updateTrainingProgress() {
            const progressDiv = document.getElementById('training-progress');
            const messageCount = currentSession?.messages?.length || 0;
            const userMessageCount = currentSession?.messages?.filter(m => m.role === 'user').length || 0;
            
            progressDiv.innerHTML = `
                <div>Messages: ${messageCount}</div>
                <div>Your responses: ${userMessageCount}</div>
                <div>Progress: ${Math.round(currentAgent?.trainingProgress || 0)}%</div>
            `;
        }

        // Handle Enter key in message input
        document.addEventListener('DOMContentLoaded', function() {
            const messageInput = document.getElementById('message-input');
            messageInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
        });

        // Show create agent modal
        function showCreateAgentModal() {
            document.getElementById('create-agent-modal').classList.add('show');
        }

        // Hide create agent modal
        function hideCreateAgentModal() {
            document.getElementById('create-agent-modal').classList.remove('show');
            document.getElementById('create-agent-form').reset();
        }

        // Handle create agent form submission
        document.getElementById('create-agent-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const agentData = {
                name: formData.get('name'),
                description: formData.get('description')
            };

            showLoading('Creating Agent...', 'Setting up your new AI agent. This will take just a moment.');

            try {
                const response = await fetch('/api/agents', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
                    },
                    body: JSON.stringify(agentData)
                });
                
                hideLoading();
                
                if (response.ok) {
                    hideCreateAgentModal();
                    loadAgents();
                    showMessageBox('success', 'Agent Created!', `Your AI agent "${agentData.name}" has been created successfully and is ready for training.`);
                } else {
                    const error = await response.json();
                    showMessageBox('error', 'Creation Failed', `Failed to create agent: ${error.message}`, false);
                }
            } catch (error) {
                hideLoading();
                console.error('Error creating agent:', error);
                showMessageBox('error', 'Connection Error', 'Unable to create agent. Please check your connection and try again.', false);
            }
        });

        // Complete training session (includes generating system prompt)
        async function completeTraining() {
            if (!currentSession) return;

            if (confirm('Complete this training session and update your agent? This will analyze the conversation and improve your agent\'s responses.')) {
                showLoading('Completing Training...', 'Analyzing conversation and updating your agent. This may take a few moments.');

                try {
                    // Step 1: Complete the training session
                    const completeResponse = await fetch(`/api/agents/training-sessions/${currentSession.id}/complete`, {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
                        }
                    });
                    
                    if (!completeResponse.ok) {
                        throw new Error('Failed to complete training session');
                    }

                    // Step 2: Generate system prompt with conversation history
                    const conversationHistory = currentSession?.messages?.map(m => `${m.role}: ${m.content}`) || [];
                    
                    const promptResponse = await fetch(`/api/agents/${currentAgent.id}/generate-prompt`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
                        },
                        body: JSON.stringify({ conversationHistory })
                    });
                    
                    if (!promptResponse.ok) {
                        console.warn('System prompt generation failed, but training session completed successfully');
                    }

                    hideLoading();
                    showMessageBox('success', 'Training Complete!', 'Your training session has been completed successfully! Your agent has been updated with new insights and is now smarter.');
                    
                    // Refresh agents list and start new session
                    loadAgents();
                    await startTrainingSession();
                    loadChatMessages();
                    
                } catch (error) {
                    hideLoading();
                    console.error('Error completing training:', error);
                    showMessageBox('error', 'Training Failed', 'Unable to complete the training session. Please try again or contact support if the issue persists.', false);
                }
            }
        }

        // Show current session
        function showCurrentSession() {
            document.getElementById('current-tab').classList.add('active');
            document.getElementById('history-tab').classList.remove('active');
            document.getElementById('current-session-tab').style.display = 'block';
            document.getElementById('training-history-tab').style.display = 'none';
        }

        // Show training history
        function showTrainingHistory() {
            document.getElementById('current-tab').classList.remove('active');
            document.getElementById('history-tab').classList.add('active');
            document.getElementById('current-session-tab').style.display = 'none';
            document.getElementById('training-history-tab').style.display = 'block';
            loadTrainingHistory();
        }

                 // Load training history for current agent
         async function loadTrainingHistory() {
             if (!currentAgent) {
                 document.getElementById('training-sessions-list').innerHTML = `
                     <div style="text-align: center; color: #6b7280; padding: 2rem 0;">
                         <p>Select an agent to view training history</p>
                     </div>
                 `;
                 return;
             }

             try {
                 const response = await fetch(`/api/agents/${currentAgent.id}/training-sessions`, {
                     headers: {
                         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
                     }
                 });
                 
                 if (response.ok) {
                     const data = await response.json();
                     displayTrainingHistory(data.data);
                 } else {
                     console.error('Failed to load training history');
                     document.getElementById('training-sessions-list').innerHTML = `
                         <div style="text-align: center; color: #ef4444; padding: 2rem 0;">
                             <p>Failed to load training history</p>
                         </div>
                     `;
                 }
             } catch (error) {
                 console.error('Error loading training history:', error);
                 document.getElementById('training-sessions-list').innerHTML = `
                     <div style="text-align: center; color: #ef4444; padding: 2rem 0;">
                         <p>Error loading training history</p>
                     </div>
                 `;
             }
         }

         // Display training history
         function displayTrainingHistory(sessions) {
             const trainingSessionsList = document.getElementById('training-sessions-list');
             
             if (!sessions || sessions.length === 0) {
                 trainingSessionsList.innerHTML = `
                     <div style="text-align: center; color: #6b7280; padding: 2rem 0;">
                         <div style="font-size: 2rem; margin-bottom: 0.5rem;">📚</div>
                         <p>No training sessions found</p>
                         <p style="font-size: 0.875rem; margin-top: 0.25rem;">Start a new training session to begin building history.</p>
                     </div>
                 `;
                 return;
             }

             trainingSessionsList.innerHTML = sessions.map(session => {
                 const messageCount = session.messages ? session.messages.length : 0;
                 const userMessageCount = session.messages ? session.messages.filter(m => m.role === 'user').length : 0;
                 const status = session.status?.toLowerCase() === 'completed' ? 'completed' : (session.id === currentSession?.id ? 'active' : 'incomplete');
                 const statusText = status === 'completed' ? 'Completed' : (status === 'active' ? 'Active' : 'Incomplete');
                 const statusClass = `status-${status}`;

                 return `
                     <div class="session-card" onclick="selectSession('${session.id}', '${status}')">
                         <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 0.5rem;">
                             <div>
                                 <h4 style="margin: 0; font-weight: 500; font-size: 0.95rem;">${session.title || `Session ${session.id.substring(0, 8)}...`}</h4>
                                 <p style="margin: 0.25rem 0 0; font-size: 0.8rem; color: #6b7280;">${new Date(session.createdAt).toLocaleDateString()} at ${new Date(session.createdAt).toLocaleTimeString()}</p>
                             </div>
                             <span class="session-status ${statusClass}">${statusText}</span>
                         </div>
                         <div style="display: flex; justify-content: space-between; align-items: center; font-size: 0.8rem; color: #6b7280;">
                             <span>${messageCount} messages (${userMessageCount} from you)</span>
                             <div style="display: flex; gap: 0.5rem;">
                                 ${status === 'incomplete' ? '<button onclick="event.stopPropagation(); resumeSession(\'' + session.id + '\')" class="btn" style="font-size: 0.75rem; padding: 0.25rem 0.5rem; background: #3b82f6; color: white;">Resume</button>' : ''}
                                 ${status !== 'completed' ? '<button onclick="event.stopPropagation(); completeSessionById(\'' + session.id + '\')" class="btn" style="font-size: 0.75rem; padding: 0.25rem 0.5rem; background: #10b981; color: white;">Complete</button>' : ''}
                                 <button onclick="event.stopPropagation(); viewSessionDetails('${session.id}')" class="btn" style="font-size: 0.75rem; padding: 0.25rem 0.5rem; background: #6b7280; color: white;">View</button>
                             </div>
                         </div>
                     </div>
                 `;
             }).join('');
         }

         // Select a training session
         async function selectSession(sessionId, status) {
             if (status === 'active') {
                 // Switch to current session tab
                 showCurrentSession();
                 return;
             }
             
             // For completed or incomplete sessions, just view them for now
             viewSessionDetails(sessionId);
         }

         // Resume an incomplete session
         async function resumeSession(sessionId) {
             showLoading('Resuming Session...', 'Loading your training session and conversation history.');
             
             try {
                 const response = await fetch(`/api/agents/training-sessions/${sessionId}`, {
                     headers: {
                         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
                     }
                 });
                 
                 hideLoading();
                 
                 if (response.ok) {
                     const data = await response.json();
                     currentSession = data.data;
                     
                     // Switch to current session tab
                     showCurrentSession();
                     loadChatMessages();
                     updateTrainingProgress();
                     
                     showMessageBox('success', 'Session Resumed!', 'Welcome back! You can continue training from exactly where you left off.');
                 } else {
                     showMessageBox('error', 'Resume Failed', 'Unable to resume the training session. It may have been deleted or you may not have permission to access it.', false);
                 }
             } catch (error) {
                 hideLoading();
                 console.error('Error resuming session:', error);
                 showMessageBox('error', 'Connection Error', 'Unable to resume session due to a connection issue. Please try again.', false);
             }
         }

                  // Complete a session by ID
         async function completeSessionById(sessionId) {
             if (confirm('Complete this training session? This will analyze the conversation and improve your agent.')) {
                 showLoading('Completing Session...', 'Analyzing conversation and generating insights for your agent.');
                 
                 try {
                     // First get the session to get conversation history
                     const sessionResponse = await fetch(`/api/agents/training-sessions/${sessionId}`, {
                         headers: {
                             'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
                         }
                     });
                     
                     if (!sessionResponse.ok) {
                         throw new Error('Failed to fetch session');
                     }
                     
                     const sessionData = await sessionResponse.json();
                     const session = sessionData.data;
                     
                     // Complete the session
                     const completeResponse = await fetch(`/api/agents/training-sessions/${sessionId}/complete`, {
                         method: 'POST',
                         headers: {
                             'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
                         }
                     });
                     
                     if (!completeResponse.ok) {
                         throw new Error('Failed to complete session');
                     }

                     // Generate system prompt with conversation history
                     const conversationHistory = session.messages?.map(m => `${m.role}: ${m.content}`) || [];
                     
                     const promptResponse = await fetch(`/api/agents/${currentAgent.id}/generate-prompt`, {
                         method: 'POST',
                         headers: {
                             'Content-Type': 'application/json',
                             'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
                         },
                         body: JSON.stringify({ conversationHistory })
                     });
                     
                     if (!promptResponse.ok) {
                         console.warn('System prompt generation failed, but training session completed successfully');
                     }

                     hideLoading();
                     showMessageBox('success', 'Session Completed!', 'The training session has been completed successfully! Your agent is now smarter and the session history has been updated.');
                     
                     // Refresh training history and agents list
                     await loadTrainingHistory();
                     await loadAgents();
                     
                     // Reload current agent to get updated progress
                     if (currentAgent) {
                         await selectAgent(currentAgent.id);
                     }
                     
                 } catch (error) {
                     hideLoading();
                     console.error('Error completing session:', error);
                     showMessageBox('error', 'Completion Failed', 'Unable to complete the training session. Please try again or contact support if the issue continues.', false);
                 }
             }
         }

         // View session details
         async function viewSessionDetails(sessionId) {
             showLoading('Loading Details...', 'Fetching session details and conversation history.');
             
             try {
                 const response = await fetch(`/api/agents/training-sessions/${sessionId}`, {
                     headers: {
                         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
                     }
                 });
                 
                 hideLoading();
                 
                 if (response.ok) {
                     const data = await response.json();
                     const session = data.data;
                     
                     // Create a modal to show session details
                     const modal = document.createElement('div');
                     modal.className = 'modal show';
                     modal.innerHTML = `
                         <div class="modal-content" style="max-width: 600px; max-height: 80vh; overflow-y: auto;">
                             <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
                                 <h3 style="margin: 0; font-size: 1.25rem; font-weight: 600;">Training Session Details</h3>
                                 <button onclick="this.closest('.modal').remove()" style="background: none; border: none; font-size: 1.5rem; cursor: pointer;">×</button>
                             </div>
                             <div style="margin-bottom: 1rem;">
                                 <p><strong>Created:</strong> ${new Date(session.createdAt).toLocaleDateString()} at ${new Date(session.createdAt).toLocaleTimeString()}</p>
                                 <p><strong>Status:</strong> ${session.status?.toLowerCase() === 'completed' ? 'Completed' : 'Incomplete'}</p>
                                 <p><strong>Messages:</strong> ${session.messages ? session.messages.length : 0}</p>
                             </div>
                             <div style="max-height: 400px; overflow-y: auto; border: 1px solid #e5e7eb; border-radius: 6px; padding: 1rem;">
                                 ${session.messages && session.messages.length > 0 ? 
                                     session.messages.map(message => `
                                         <div style="margin-bottom: 1rem; padding: 0.75rem; background: ${message.role === 'user' ? '#eff6ff' : '#f9fafb'}; border-radius: 6px;">
                                             <div style="font-weight: 500; margin-bottom: 0.25rem;">${message.role === 'user' ? 'You' : currentAgent.name}</div>
                                             <div style="font-size: 0.875rem;">${message.content}</div>
                                             <div style="font-size: 0.75rem; color: #6b7280; margin-top: 0.25rem;">${new Date(message.timestamp).toLocaleTimeString()}</div>
                                         </div>
                                     `).join('') : 
                                     '<p style="text-align: center; color: #6b7280;">No messages in this session</p>'
                                 }
                             </div>
                         </div>
                     `;
                     
                     document.body.appendChild(modal);
                     
                     // Close modal when clicking outside
                     modal.addEventListener('click', function(e) {
                         if (e.target === modal) {
                             modal.remove();
                         }
                     });
                 } else {
                     showMessageBox('error', 'Loading Failed', 'Unable to load session details. The session may have been deleted or you may not have permission to view it.', false);
                 }
             } catch (error) {
                 hideLoading();
                 console.error('Error loading session details:', error);
                 showMessageBox('error', 'Connection Error', 'Unable to load session details due to a connection issue. Please try again.', false);
             }
         }
    </script>
</body>
</html> 