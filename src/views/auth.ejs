<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
</head>
<body>
    <div class="auth-container">
        <div class="auth-card">
            <div class="auth-header">
                <h1 class="logo">Colabi</h1>
                <h2><%= mode === 'login' ? 'Welcome back' : 'Create your account' %></h2>
                <p><%= mode === 'login' ? 'Sign in to your account' : 'Get started with your free account' %></p>
            </div>

            <!-- Error/Success Messages -->
            <div id="alert-message" class="alert" style="display: none;">
                <p id="alert-text"></p>
            </div>

            <div class="social-auth">
                <button class="social-btn google-btn" onclick="handleSocialLogin('google')">
                    <svg width="20" height="20" viewBox="0 0 24 24">
                        <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                        <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                        <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                        <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                    </svg>
                    Continue with Google
                </button>

                <button class="social-btn github-btn" onclick="handleSocialLogin('github')">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                    </svg>
                    Continue with GitHub
                </button>

                <button class="social-btn facebook-btn" onclick="handleSocialLogin('facebook')">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="#1877F2">
                        <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                    </svg>
                    Continue with Facebook
                </button>
            </div>

            <div class="divider">
                <span>or</span>
            </div>

            <form id="authForm" class="auth-form">
                <% if (mode === 'register') { %>
                <div class="form-group">
                    <label for="name">Full Name</label>
                    <input type="text" id="name" name="name" required>
                    <div class="field-error" id="name-error"></div>
                </div>
                <% } %>

                <div class="form-group">
                    <label for="email">Email address</label>
                    <input type="email" id="email" name="email" required>
                    <div class="field-error" id="email-error"></div>
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <input type="password" id="password" name="password" required>
                    <div class="field-error" id="password-error"></div>
                    <% if (mode === 'register') { %>
                    <div class="password-requirements">
                        <small>Password must contain at least 8 characters, including uppercase, lowercase, number, and special character</small>
                    </div>
                    <% } %>
                </div>

                <% if (mode === 'register') { %>
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <input type="password" id="confirmPassword" name="confirmPassword" required>
                    <div class="field-error" id="confirmPassword-error"></div>
                </div>

                <div class="form-group">
                    <label for="role">I am a...</label>
                    <select id="role" name="role">
                        <option value="influencer">Influencer</option>
                        <option value="agency">Agency/Manager</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="company">Company/Brand (Optional)</label>
                    <input type="text" id="company" name="company">
                </div>
                <% } %>

                <% if (mode === 'login') { %>
                <div class="form-options">
                    <label class="checkbox-container">
                        <input type="checkbox" id="rememberMe" name="rememberMe">
                        <span class="checkmark"></span>
                        Remember me
                    </label>
                    <a href="#" class="forgot-link" onclick="handleForgotPassword()">Forgot password?</a>
                </div>
                <% } %>

                <button type="submit" class="auth-submit" id="submit-btn">
                    <span id="submit-text"><%= mode === 'login' ? 'Sign in' : 'Create account' %></span>
                    <span id="submit-loader" style="display: none;">Loading...</span>
                </button>
            </form>

            <div class="auth-footer">
                <% if (mode === 'login') { %>
                    <p>Don't have an account? <a href="/register">Sign up</a></p>
                <% } else { %>
                    <p>Already have an account? <a href="/login">Sign in</a></p>
                <% } %>
            </div>
        </div>
    </div>

    <style>
        .alert {
            padding: 12px 16px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 14px;
        }
        
        .alert.success {
            background-color: #d1fae5;
            color: #065f46;
            border: 1px solid #a7f3d0;
        }
        
        .alert.error {
            background-color: #fee2e2;
            color: #991b1b;
            border: 1px solid #fca5a5;
        }
        
        .field-error {
            color: #dc2626;
            font-size: 12px;
            margin-top: 4px;
            display: none;
        }
        
        .field-error.show {
            display: block;
        }
        
        .password-requirements {
            margin-top: 4px;
        }
        
        .password-requirements small {
            color: #6b7280;
            font-size: 11px;
        }
        
        .form-group select {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 14px;
            background-color: white;
        }
    </style>

    <script>
        // Auth utilities
        const AuthUtils = {
            // Store tokens in localStorage
            setTokens: (tokens) => {
                localStorage.setItem('accessToken', tokens.accessToken);
                localStorage.setItem('refreshToken', tokens.refreshToken);
            },
            
            // Get access token
            getAccessToken: () => {
                return localStorage.getItem('accessToken');
            },
            
            // Clear tokens
            clearTokens: () => {
                localStorage.removeItem('accessToken');
                localStorage.removeItem('refreshToken');
            }
        };
        
        // Show alert message
        function showAlert(message, type = 'error') {
            const alertElement = document.getElementById('alert-message');
            const alertText = document.getElementById('alert-text');
            
            alertText.textContent = message;
            alertElement.className = `alert ${type}`;
            alertElement.style.display = 'block';
            
            // Hide after 5 seconds
            setTimeout(() => {
                alertElement.style.display = 'none';
            }, 5000);
        }
        
        // Show field error
        function showFieldError(fieldName, message) {
            const errorElement = document.getElementById(`${fieldName}-error`);
            if (errorElement) {
                errorElement.textContent = message;
                errorElement.classList.add('show');
            }
        }
        
        // Clear all field errors
        function clearFieldErrors() {
            const errorElements = document.querySelectorAll('.field-error');
            errorElements.forEach(element => {
                element.classList.remove('show');
                element.textContent = '';
            });
        }
        
        // Set loading state
        function setLoading(loading) {
            const submitBtn = document.getElementById('submit-btn');
            const submitText = document.getElementById('submit-text');
            const submitLoader = document.getElementById('submit-loader');
            
            if (loading) {
                submitBtn.disabled = true;
                submitText.style.display = 'none';
                submitLoader.style.display = 'inline';
            } else {
                submitBtn.disabled = false;
                submitText.style.display = 'inline';
                submitLoader.style.display = 'none';
            }
        }
        
        // Handle social login
        function handleSocialLogin(provider) {
            showAlert(`${provider} login integration coming soon!`, 'error');
        }
        
        // Handle forgot password
        function handleForgotPassword() {
            const email = document.getElementById('email').value;
            if (!email) {
                showAlert('Please enter your email address first', 'error');
                return;
            }
            
            // Call forgot password API
            fetch('/api/auth/forgot-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ email })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('Password reset instructions sent to your email', 'success');
                } else {
                    showAlert(data.error || 'Failed to send reset email', 'error');
                }
            })
            .catch(error => {
                showAlert('Network error. Please try again.', 'error');
            });
        }
        
        // Form submission handler
        document.getElementById('authForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            clearFieldErrors();
            setLoading(true);
            
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData);
            
            const mode = '<%= mode %>';
            const endpoint = mode === 'login' ? '/api/auth/login' : '/api/auth/register';
            
            try {
                const response = await fetch(endpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Store tokens if login/register successful
                    if (result.data && result.data.tokens) {
                        AuthUtils.setTokens(result.data.tokens);
                    }
                    
                    showAlert(result.message || `${mode === 'login' ? 'Login' : 'Registration'} successful!`, 'success');
                    
                    // Redirect after short delay
                    setTimeout(() => {
                        window.location.href = '/dashboard';
                    }, 1500);
                } else {
                    // Handle validation errors
                    if (result.details && Array.isArray(result.details)) {
                        result.details.forEach(error => {
                            showFieldError(error.field, error.message);
                        });
                    } else {
                        showAlert(result.error || `${mode === 'login' ? 'Login' : 'Registration'} failed`, 'error');
                    }
                }
            } catch (error) {
                console.error('Auth error:', error);
                showAlert('Network error. Please try again.', 'error');
            } finally {
                setLoading(false);
            }
        });
        
        // Check if user is already logged in
        document.addEventListener('DOMContentLoaded', () => {
            const token = AuthUtils.getAccessToken();
            if (token) {
                // Verify token is still valid by calling /api/auth/me
                fetch('/api/auth/me', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                })
                .then(response => {
                    if (response.ok) {
                        // User is logged in, redirect to dashboard
                        window.location.href = '/dashboard';
                    } else {
                        // Token is invalid, clear it
                        AuthUtils.clearTokens();
                    }
                })
                .catch(() => {
                    // Network error or token invalid
                    AuthUtils.clearTokens();
                });
            }
        });
    </script>
</body>
</html>