<!-- views/layouts/dashboard.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
</head>

<body>
    <div class="dashboard-container">
        <!-- Include header partial -->
        <%- include('../partials/dashboard-header', { currentPage: currentPage }) %>

            <!-- Main Content -->
            <main class="dashboard-main">
                <!-- Page content will be inserted here -->

                <div class="dashboard-title">
                    <h2>Message Intelligence Dashboard</h2>
                    <p id="welcome-message">Welcome back! Here's your AI-powered message management overview.</p>
                </div>

                <!-- Loading State -->
                <div id="loading-state" class="loading-container">
                    <div class="spinner"></div>
                    <p>Loading your dashboard...</p>
                </div>

                <!-- Error State -->
                <div id="error-state" class="error-container" style="display: none;">
                    <h3>Unable to load dashboard</h3>
                    <p id="error-message">Please try refreshing the page or contact support.</p>
                    <button onclick="loadDashboard()" class="btn btn-primary">Retry</button>
                </div>

                <!-- Dashboard Content -->
                <div id="dashboard-content" style="display: none;">
                    <!-- Metrics Grid -->
                    <div class="metrics-grid" id="metrics-grid">
                        <!-- Metrics will be populated dynamically -->
                    </div>

                    <!-- Additional Content Area -->
                    <div class="content-area">
                        <div class="recent-activity">
                            <h3>Recent Activity</h3>
                            <div class="activity-list" id="activity-list">
                                <!-- Activity items will be populated dynamically -->
                            </div>
                        </div>
                    </div>
                </div>

                <style>
                    .loading-container {
                        text-align: center;
                        padding: 60px 20px;
                    }

                    .spinner {
                        width: 40px;
                        height: 40px;
                        border: 4px solid #f3f4f6;
                        border-top: 4px solid #667eea;
                        border-radius: 50%;
                        animation: spin 1s linear infinite;
                        margin: 0 auto 20px;
                    }

                    @keyframes spin {
                        0% {
                            transform: rotate(0deg);
                        }

                        100% {
                            transform: rotate(360deg);
                        }
                    }

                    .error-container {
                        text-align: center;
                        padding: 60px 20px;
                        background: white;
                        border-radius: 12px;
                        border: 1px solid #e5e7eb;
                    }

                    .error-container h3 {
                        color: #dc2626;
                        margin-bottom: 10px;
                    }

                    .error-container p {
                        color: #6b7280;
                        margin-bottom: 20px;
                    }
                </style>

                <script>
                    // Page-specific initialization
                    async function initializePage() {
                        await loadDashboard();
                    }

                    // Dashboard state
                    let dashboardMetrics = null;

                    // Load dashboard metrics
                    async function loadDashboardMetrics() {
                        try {
                            const response = await AuthUtils.apiCall('/api/users/dashboard/metrics');
                            if (!response || !response.ok) {
                                throw new Error('Failed to load dashboard metrics');
                            }

                            const data = await response.json();
                            return data.data.metrics;
                        } catch (error) {
                            console.error('Error loading dashboard metrics:', error);
                            // Return zero metrics if loading fails
                            return {
                                messagesReceived: 0,
                                businessOpportunities: 0,
                                fanbaseMessages: 0,
                                spamMessages: 0,
                                accountsConnected: 0,
                                messagesResponded: 0,
                                avgResponseTime: 0,
                                responseRate: 0
                            };
                        }
                    }

                    // Load recent activity
                    async function loadRecentActivity() {
                        try {
                            const response = await AuthUtils.apiCall('/api/users/dashboard/activity?limit=5');
                            if (!response || !response.ok) {
                                throw new Error('Failed to load recent activity');
                            }

                            const data = await response.json();
                            return data.data.activity;
                        } catch (error) {
                            console.error('Error loading recent activity:', error);
                            // Return mock activity if loading fails
                            return [
                                {
                                    type: 'message',
                                    message: 'Welcome to your dashboard! Start by connecting your social media accounts.',
                                    timestamp: new Date()
                                }
                            ];
                        }
                    }

                    // Create metrics grid
                    function createMetricsGrid(metrics) {
                        const metricItems = [
                            {
                                label: 'Messages Received',
                                value: formatNumber(metrics.messagesReceived || 0),
                                icon: 'messages',
                                change: 'Total incoming messages'
                            },
                            {
                                label: 'Business Opportunities',
                                value: formatNumber(metrics.businessOpportunities || 0),
                                icon: 'business',
                                change: 'Partnership & collaboration inquiries'
                            },
                            {
                                label: 'Fanbase Messages',
                                value: formatNumber(metrics.fanbaseMessages || 0),
                                icon: 'fans',
                                change: 'Questions & general messages'
                            },
                            {
                                label: 'Spam Messages',
                                value: formatNumber(metrics.spamMessages || 0),
                                icon: 'spam',
                                change: 'Filtered automatically'
                            },
                            {
                                label: 'Accounts Connected',
                                value: metrics.accountsConnected || 0,
                                icon: 'accounts',
                                change: 'Active social media accounts'
                            },
                            {
                                label: 'Messages Responded',
                                value: formatNumber(metrics.messagesResponded || 0),
                                icon: 'responded',
                                change: 'Successfully handled'
                            },
                            {
                                label: 'Avg Response Time',
                                value: `${metrics.avgResponseTime || 0}m`,
                                icon: 'time',
                                change: 'Minutes to respond'
                            },
                            {
                                label: 'Response Rate',
                                value: `${metrics.responseRate || 0}%`,
                                icon: 'rate',
                                change: 'Messages with responses'
                            }
                        ];

                        const metricsGrid = document.getElementById('metrics-grid');
                        metricsGrid.innerHTML = '';

                        metricItems.forEach(metric => {
                            const metricCard = document.createElement('div');
                            metricCard.className = 'metric-card';
                            metricCard.innerHTML = `
                <div class="metric-header">
                    <h3 class="metric-label">${metric.label}</h3>
                    <div class="metric-icon">
                        ${getMetricIcon(metric.icon)}
                    </div>
                </div>
                <div class="metric-value">${metric.value}</div>
                <div class="metric-change">
                    ${metric.change}
                </div>
            `;
                            metricsGrid.appendChild(metricCard);
                        });
                    }

                    // Get metric icon SVG
                    function getMetricIcon(type) {
                        const icons = {
                            messages: '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/></svg>',
                            business: '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="12" y1="1" x2="12" y2="23"/><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/></svg>',
                            fans: '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/></svg>',
                            spam: '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"/><line x1="4.93" y1="4.93" x2="19.07" y2="19.07"/></svg>',
                            accounts: '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/><rect x="8" y="2" width="8" height="4" rx="1" ry="1"/></svg>',
                            responded: '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M9 12l2 2 4-4"/><path d="M21 12c.552 0 1-.448 1-1s-.448-1-1-1"/><path d="M3 12c-.552 0-1-.448-1-1s.448-1 1-1"/><path d="M12 21c.552 0 1-.448 1-1s-.448-1-1-1"/><path d="M12 3c-.552 0-1-.448-1-1s.448-1 1-1"/></svg>',
                            time: '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"/><polyline points="12,6 12,12 16,14"/></svg>',
                            rate: '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="22,12 18,12 15,21 9,3 6,12 2,12"/></svg>'
                        };
                        return icons[type] || icons.messages;
                    }

                    // Create activity list
                    function createActivityList(activities) {
                        const activityList = document.getElementById('activity-list');
                        activityList.innerHTML = '';

                        if (!activities || activities.length === 0) {
                            const noActivity = document.createElement('div');
                            noActivity.className = 'activity-item';
                            noActivity.innerHTML = `
                <div class="activity-icon">
                    ${getMetricIcon('messages')}
                </div>
                <div class="activity-content">
                    <p>No recent activity yet. Connect your social media accounts to start receiving messages!</p>
                    <span class="activity-time">Get started</span>
                </div>
            `;
                            activityList.appendChild(noActivity);
                            return;
                        }

                        activities.forEach(activity => {
                            const activityItem = document.createElement('div');
                            activityItem.className = 'activity-item';

                            // Format timestamp
                            const timeAgo = getTimeAgo(new Date(activity.timestamp));

                            activityItem.innerHTML = `
                <div class="activity-icon">
                    ${getMetricIcon(activity.type)}
                </div>
                <div class="activity-content">
                    <p>${activity.message}</p>
                    <span class="activity-time">${timeAgo}</span>
                </div>
            `;
                            activityList.appendChild(activityItem);
                        });
                    }

                    // Helper function to format time ago
                    function getTimeAgo(date) {
                        const now = new Date();
                        const diffInSeconds = Math.floor((now - date) / 1000);

                        if (diffInSeconds < 60) {
                            return 'Just now';
                        } else if (diffInSeconds < 3600) {
                            const minutes = Math.floor(diffInSeconds / 60);
                            return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
                        } else if (diffInSeconds < 86400) {
                            const hours = Math.floor(diffInSeconds / 3600);
                            return `${hours} hour${hours > 1 ? 's' : ''} ago`;
                        } else {
                            const days = Math.floor(diffInSeconds / 86400);
                            return `${days} day${days > 1 ? 's' : ''} ago`;
                        }
                    }

                    // Format numbers
                    function formatNumber(num) {
                        if (num >= 1000000) {
                            return (num / 1000000).toFixed(1) + 'M';
                        } else if (num >= 1000) {
                            return (num / 1000).toFixed(1) + 'K';
                        }
                        return num.toString();
                    }

                    // Show error state
                    function showError(message) {
                        document.getElementById('loading-state').style.display = 'none';
                        document.getElementById('dashboard-content').style.display = 'none';
                        document.getElementById('error-message').textContent = message;
                        document.getElementById('error-state').style.display = 'block';
                    }

                    // Show dashboard content
                    function showDashboard() {
                        document.getElementById('loading-state').style.display = 'none';
                        document.getElementById('error-state').style.display = 'none';
                        document.getElementById('dashboard-content').style.display = 'block';
                    }

                    // Main dashboard loader
                    async function loadDashboard() {
                        try {
                            document.getElementById('loading-state').style.display = 'block';
                            document.getElementById('error-state').style.display = 'none';
                            document.getElementById('dashboard-content').style.display = 'none';

                            // Update welcome message with user name
                            if (currentUser) {
                                document.getElementById('welcome-message').textContent =
                                    `Welcome back, ${currentUser.name}! Here's your AI-powered message management overview.`;
                            }

                            // Load metrics and activity in parallel
                            const [metrics, activity] = await Promise.all([
                                loadDashboardMetrics(),
                                loadRecentActivity()
                            ]);

                            // Create UI components
                            createMetricsGrid(metrics);
                            createActivityList(activity);

                            // Show the dashboard
                            showDashboard();

                        } catch (error) {
                            console.error('Dashboard load error:', error);
                            showError('Failed to load dashboard data. Please try again.');
                        }
                    }
                </script>
            </main>
    </div>

    <!-- Include footer scripts -->
    <%- include('../partials/dashboard-scripts') %>
</body>

</html>